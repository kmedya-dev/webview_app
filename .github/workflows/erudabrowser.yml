name: Build ErudaBrowser APK

on:
  push:
    branches:
      - main
    tags:
      - 'v*.*.*' # Trigger on tag pushes like v1.0.0
  workflow_dispatch: # Manual trigger
    inputs:
      profile:
        description: "Buildozer profile (default or demo)"
        required: false
        default: "default"

env:
  PYTHON_VERSION: "3.11"  # Updated to more compatible version
  ANDROID_SDK_ROOT: ${{ github.workspace }}/android-sdk
  ANDROID_NDK_HOME: ${{ github.workspace }}/android-ndk-r25b
  BUILD_TOOLS_VERSION: "34.0.0" # More stable version
  PLATFORMS_VERSION: "android-33" # Target Android API level

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # --- Initial Setup ---
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Environment Variables for Workflow Dispatch
        id: set_profile
        run: |
          PROFILE="${{ github.event.inputs.profile || 'default' }}"
          echo "PROFILE=$PROFILE" >> $GITHUB_ENV
          echo "profile_output=$PROFILE" >> $GITHUB_OUTPUT # For artifact naming

      # --- Environment & Tooling Setup ---
      - name: Install System Dependencies
        run: |
          sudo apt-get update
          # Install essential build tools, libraries, and Java Development Kit (JDK)
          # required for compiling Android applications and Python-for-Android.
          sudo apt-get install -y \
            build-essential autoconf automake libtool libltdl-dev \
            libffi-dev libssl-dev libsdl2-dev libsdl2-image-dev libsdl2-mixer-dev libsdl2-ttf-dev \
            libportmidi-dev libswscale-dev libavformat-dev libavcodec-dev zlib1g-dev \
            libgstreamer1.0-0 libgstreamer1.0-dev gstreamer1.0-tools gstreamer1.0-plugins-base gstreamer1.0-plugins-good             libpango1.0-dev libgl1-mesa-dev libgles2-mesa-dev git zip unzip openjdk-17-jdk ant

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Python Dependencies
        run: |
          # Upgrade pip and install core Python packages.
          pip install --upgrade pip setuptools wheel
          # Install build tools like buildozer and cython
          pip install -r buildozer-requirements.txt
          # Install application dependencies like Kivy and PyWebView
          pip install -r requirements.txt

      - name: Install dependencies for desktop preview
        run: |
          pip install pywebview pyjnius
          python -c "import webview; webview.create_window('Test', 'https://google.com')"

      

      - name: Setup Android SDK
        run: |
          # Download and set up the Android SDK Command-line Tools.
          # This includes tools like `sdkmanager` and `adb`.
          mkdir -p ${{ env.ANDROID_SDK_ROOT }}/cmdline-tools
          cd ${{ env.ANDROID_SDK_ROOT }}/cmdline-tools
          curl -o commandlinetools.zip https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip
          unzip commandlinetools.zip -d temp
          rm commandlinetools.zip
          mv temp/cmdline-tools latest
          # Set environment variables for Android SDK paths for subsequent steps.
          echo "ANDROID_HOME=${{ env.ANDROID_SDK_ROOT }}" >> $GITHUB_ENV
          echo "ANDROID_SDK_ROOT=${{ env.ANDROID_SDK_ROOT }}" >> $GITHUB_ENV
          echo "${{ env.ANDROID_SDK_ROOT }}/platform-tools" >> $GITHUB_PATH
          echo "${{ env.ANDROID_SDK_ROOT }}/cmdline-tools/latest/bin" >> $GITHUB_PATH

      - name: Accept Android SDK Licenses
        run: |
          mkdir -p $ANDROID_SDK_ROOT/licenses
          cat <<EOF > $ANDROID_SDK_ROOT/licenses/android-sdk-license
          8933bad161af4178b1185d1a37fbf41ea5269c55
          d56f5187479451eabf01fb78af6dfcb131a6481e
          EOF
          yes 2>/dev/null | sdkmanager --licenses || true # Suppress broken pipe error from 'yes'

      - name: Install Android SDK Packages
        run: |
          # Install specific Android SDK components: platform-tools, build-tools, and a target Android platform.
          sdkmanager "platform-tools" "build-tools;${{ env.BUILD_TOOLS_VERSION }}" "platforms;${{ env.PLATFORMS_VERSION }}"

      - name: Install Android NDK
        run: |
          # Download and extract the Android Native Development Kit (NDK).
          # The NDK is used for compiling native code (C/C++) for Android.
          wget https://dl.google.com/android/repository/android-ndk-r25b-linux.zip
          unzip -q android-ndk-r25b-linux.zip -d ${{ github.workspace }}
          # Set environment variables for Android NDK paths.
          echo "ANDROID_NDK_HOME=${{ env.ANDROID_NDK_HOME }}" >> $GITHUB_ENV
          echo "${{ env.ANDROID_NDK_HOME }}" >> $GITHUB_PATH

      - name: Configure Buildozer NDK Path
        run: |
          # Dynamically update buildozer.spec to point to the downloaded NDK.
          # This prevents Buildozer from attempting to re-download the NDK.
          # First, uncomment the line, then set its value.
          sed -i '/^#android.ndk_path/s/^#//' buildozer.spec
          sed -i "s|^android.ndk_path =.*|android.ndk_path = ${ANDROID_NDK_HOME}|g" buildozer.spec

      

      - name: Clean Buildozer Cache
        run: |
          # Remove previous Buildozer build artifacts and caches to ensure a clean build.
          rm -rf .buildozer
          rm -rf ~/.buildozer

      - name: Fix Buildozer SDK Path Symlinks
        run: |
          # Create symbolic links for Buildozer to correctly locate Android SDK components.
          mkdir -p ~/.buildozer/android/platform/android-sdk
          ln -sfn $ANDROID_SDK_ROOT/build-tools ~/.buildozer/android/platform/android-sdk/build-tools
          ln -sfn $ANDROID_SDK_ROOT/cmdline-tools/latest ~/.buildozer/android/platform/android-sdk/tools    

     # --- Build Execution & Log Capture ---
      - name: Build Debug APK
        run: |
          echo "üöÄ Starting Buildozer Debug Build for profile: ${{ env.PROFILE }}"
          touch buildozer.log
          # Execute the build process for the debug APK
          buildozer android debug --android-api=33 2>&1 | tee buildozer.log || echo "‚ùå Build failed, but log captured."
          echo "‚úÖ Build step completed (even if with errors)."

      - name: Upload Buildozer Log Artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: buildozer-log-${{ env.PROFILE }}
          path: buildozer.log
      
      - name: Find and Standardize Debug APK Name
        run: |
          # Locate the generated debug APK and standardize its name.
          DEBUG_APK=$(find bin -name "*-debug.apk" | head -n 1)
          if [ -z "$DEBUG_APK" ]; then
            echo "‚ùå Debug APK not found. Build might have failed."
            exit 1
          fi
          echo "Found Debug APK: $DEBUG_APK"
          mv "$DEBUG_APK" bin/ErudaBrowser-debug.apk # Standardize name

      - name: Create Symlink for Debug APK
        run: |
          # Create a generic symlink for the debug APK for easier access/reference.
          ln -sfn bin/ErudaBrowser-debug.apk bin/ErudaBrowser.apk

      - name: Upload Debug APK Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ErudaBrowser-debug-apk-${{ env.PROFILE }}
          path: bin/ErudaBrowser-debug.apk

      - name: Check If Signing Secrets Exist
        id: signing_check
        run: |
          # Check for the presence of all necessary signing secrets.
          # If secrets are missing, the release APK build and signing steps will be skipped.
          if [ -n "${{ secrets.KEYSTORE_BASE64 }}" ] && \
             [ -n "${{ secrets.KEYSTORE_PASSWORD }}" ] && \
             [ -n "${{ secrets.KEY_ALIAS }}" ] && \
             [ -n "${{ secrets.KEY_PASSWORD }}" ]; then
            echo "signing_enabled=true" >> "$GITHUB_OUTPUT"
          else
            echo "signing_enabled=false" >> "$GITHUB_OUTPUT"
            echo "::warning::Signing secrets not found. Skipping release APK build and signing."
          fi

      - name: Build Release APK (if signing enabled)
        if: steps.signing_check.outputs.signing_enabled == 'true'
        run: |
          # Update buildozer.spec with any extra recipes before building
          if [ -f update_requirements.py ]; then
            python update_requirements.py "default" # Release builds always use the default profile
          fi
          # Build the unsigned release APK if signing secrets are available.
          buildozer android release 2>&1 | tee -a buildozer.log # Append to log

      - name: Sign and Zipalign Release APK (if signing enabled)
        if: steps.signing_check.outputs.signing_enabled == 'true'
        env:
          KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
        run: |
          # Decode the base64 encoded keystore, sign the release APK, and zipalign it.
          # Zipalign optimizes the APK for Android, ensuring proper byte alignment.
          echo "$KEYSTORE_BASE64" | base64 --decode > release.keystore
          RELEASE_UNSIGNED_APK=$(find bin -name "*-release-unsigned.apk" | head -n 1)
          if [ -z "$RELEASE_UNSIGNED_APK" ]; then
            echo "‚ùå Unsigned release APK not found. Build might have failed."
            exit 1
          fi
          echo "Found unsigned release APK: $RELEASE_UNSIGNED_APK"

          # Sign the APK
          apksigner sign --ks release.keystore \
            --ks-pass env:KEYSTORE_PASSWORD \
            --ks-key-alias "$KEY_ALIAS" \
            --key-pass env:KEY_PASSWORD \
            "$RELEASE_UNSIGNED_APK"

          # Zipalign the signed APK
          # Output to a temporary file first, then move
          zipalign -p 4 "$RELEASE_UNSIGNED_APK" bin/ErudaBrowser-release-aligned.apk
          
          # Move to final desired name
          mv bin/ErudaBrowser-release-aligned.apk bin/ErudaBrowser-release.apk
          echo "::notice::Release APK successfully signed, zipaligned, and moved to bin/ErudaBrowser-release.apk"

      - name: Upload Release APK Artifact (if signing enabled)
        if: steps.signing_check.outputs.signing_enabled == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: ErudaBrowser-release-apk
          path: bin/ErudaBrowser-release.apk

  release:
    needs: build
    if: startsWith(github.ref, 'refs/tags/') # Only run if the push was a tag
    runs-on: ubuntu-latest
    steps:
      - name: Download Release APK
        uses: actions/download-artifact@v4
        with:
          name: ErudaBrowser-release-apk # Name of the artifact uploaded in the build job

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: ErudaBrowser-release.apk # The downloaded file will be in the current directory
          generate_release_notes: true # Automatically generate release notes
